/*
 * Created on 9 avr. 2015 ( Time 11:50:32 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.silanis.lottery.business.service.impl;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import com.silanis.lottery.bean.Ticket;
import com.silanis.lottery.bean.jpa.TicketEntity;

import java.util.Date;
import java.util.List;

import com.silanis.lottery.business.service.TicketService;
import com.silanis.lottery.business.service.mapping.TicketServiceMapper;
import com.silanis.lottery.persistence.PersistenceServiceProvider;
import com.silanis.lottery.persistence.services.TicketPersistence;

import org.springframework.stereotype.Component;

/**
 * Implementation of TicketService
 */
@Component
public class TicketServiceImpl implements TicketService {

	private TicketPersistence ticketPersistence;

	@Resource
	private TicketServiceMapper ticketServiceMapper;
	
	public TicketServiceImpl() {
		ticketPersistence = PersistenceServiceProvider.getService(TicketPersistence.class);
	}
		
	@Override
	public Ticket findById(Integer idTicket) {
		TicketEntity entity = ticketPersistence.load(idTicket);
		return ticketServiceMapper.mapTicketEntityToTicket(entity);
	}

	@Override
	public List<Ticket> findAll() {
		List<TicketEntity> entities = ticketPersistence.loadAll();
		List<Ticket> beans = new ArrayList<Ticket>();
		for(TicketEntity entity : entities) {
			beans.add(ticketServiceMapper.mapTicketEntityToTicket(entity));
		}
		return beans;
	}

	@Override
	public Ticket save(Ticket ticket) {
		return update(ticket) ;
	}

	@Override
	public Ticket create(Ticket ticket) {

		if( ticket.getIdTicket() != null && ticketPersistence.load(ticket.getIdTicket()) != null) {
			throw new IllegalStateException("already.exists");
		}
		
		TicketEntity ticketEntity = new TicketEntity();
		ticketServiceMapper.mapTicketToTicketEntity(ticket, ticketEntity);
		TicketEntity ticketEntitySaved = ticketPersistence.save(ticketEntity);
		return ticketServiceMapper.mapTicketEntityToTicket(ticketEntitySaved);
	}

	@Override
	public Ticket update(Ticket ticket) {
		TicketEntity ticketEntity = ticketPersistence.load(ticket.getIdTicket());
		ticketServiceMapper.mapTicketToTicketEntity(ticket, ticketEntity);
		TicketEntity ticketEntitySaved = ticketPersistence.save(ticketEntity);
		return ticketServiceMapper.mapTicketEntityToTicket(ticketEntitySaved);
	}

	@Override
	public void delete(Integer idTicket) {
		ticketPersistence.delete(idTicket);
	}

	public TicketPersistence getTicketPersistence() {
		return ticketPersistence;
	}

	public void setTicketPersistence(TicketPersistence ticketPersistence) {
		this.ticketPersistence = ticketPersistence;
	}

	public TicketServiceMapper getTicketServiceMapper() {
		return ticketServiceMapper;
	}

	public void setTicketServiceMapper(TicketServiceMapper ticketServiceMapper) {
		this.ticketServiceMapper = ticketServiceMapper;
	}

}
