/*
 * Created on 9 avr. 2015 ( Time 11:50:32 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.silanis.lottery.business.service.impl;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import com.silanis.lottery.bean.Winner;
import com.silanis.lottery.bean.jpa.WinnerEntity;
import com.silanis.lottery.bean.jpa.WinnerEntityKey;
import com.silanis.lottery.business.service.WinnerService;
import com.silanis.lottery.business.service.mapping.WinnerServiceMapper;
import com.silanis.lottery.persistence.PersistenceServiceProvider;
import com.silanis.lottery.persistence.services.WinnerPersistence;
import org.springframework.stereotype.Component;

/**
 * Implementation of WinnerService
 */
@Component
public class WinnerServiceImpl implements WinnerService {

	private WinnerPersistence winnerPersistence;

	@Resource
	private WinnerServiceMapper winnerServiceMapper;
	
	public WinnerServiceImpl() {
		winnerPersistence = PersistenceServiceProvider.getService(WinnerPersistence.class);
	}
		
	@Override
	public Winner findById(Integer idTicket, Integer idDraw) {
		WinnerEntity entity = winnerPersistence.load(idTicket, idDraw);
		return winnerServiceMapper.mapWinnerEntityToWinner(entity);
	}

	@Override
	public List<Winner> findAll() {
		List<WinnerEntity> entities = winnerPersistence.loadAll();
		List<Winner> beans = new ArrayList<Winner>();
		for(WinnerEntity entity : entities) {
			beans.add(winnerServiceMapper.mapWinnerEntityToWinner(entity));
		}
		return beans;
	}

	@Override
	public Winner save(Winner winner) {
		return update(winner) ;
	}

	@Override
	public Winner create(Winner winner) {
		if( winner.getIdDraw() != null && winnerPersistence.load(winner.getIdTicket(), winner.getIdDraw()) != null) {
			throw new IllegalStateException("already.exists");
		}
		WinnerEntity winnerEntity = new WinnerEntity();
		winnerServiceMapper.mapWinnerToWinnerEntity(winner, winnerEntity);
		WinnerEntity winnerEntitySaved = winnerPersistence.save(winnerEntity);
		return winnerServiceMapper.mapWinnerEntityToWinner(winnerEntitySaved);
	}

	@Override
	public Winner update(Winner winner) {
		WinnerEntity winnerEntity = winnerPersistence.load(winner.getIdTicket(), winner.getIdDraw());
		winnerServiceMapper.mapWinnerToWinnerEntity(winner, winnerEntity);
		WinnerEntity winnerEntitySaved = winnerPersistence.save(winnerEntity);
		return winnerServiceMapper.mapWinnerEntityToWinner(winnerEntitySaved);
	}

	@Override
	public void delete(Integer idTicket, Integer idDraw) {
		winnerPersistence.delete(idTicket, idDraw);
	}

	public WinnerPersistence getWinnerPersistence() {
		return winnerPersistence;
	}

	public void setWinnerPersistence(WinnerPersistence winnerPersistence) {
		this.winnerPersistence = winnerPersistence;
	}

	public WinnerServiceMapper getWinnerServiceMapper() {
		return winnerServiceMapper;
	}

	public void setWinnerServiceMapper(WinnerServiceMapper winnerServiceMapper) {
		this.winnerServiceMapper = winnerServiceMapper;
	}

}
