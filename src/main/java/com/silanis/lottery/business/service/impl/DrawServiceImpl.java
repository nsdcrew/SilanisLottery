/*
 * Created on 9 avr. 2015 ( Time 11:50:32 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.silanis.lottery.business.service.impl;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Random;

import javax.annotation.Resource;

import com.silanis.lottery.bean.Draw;
import com.silanis.lottery.bean.Ticket;
import com.silanis.lottery.bean.Winner;
import com.silanis.lottery.bean.jpa.DrawEntity;
import com.silanis.lottery.bean.jpa.TicketEntity;
import com.silanis.lottery.bean.jpa.WinnerEntity;

import java.util.Date;
import java.util.List;

import com.silanis.lottery.business.service.DrawService;
import com.silanis.lottery.business.service.mapping.DrawServiceMapper;
import com.silanis.lottery.business.service.mapping.TicketServiceMapper;
import com.silanis.lottery.business.service.mapping.WinnerServiceMapper;
import com.silanis.lottery.persistence.PersistenceServiceProvider;
import com.silanis.lottery.persistence.services.DrawPersistence;
import com.silanis.lottery.persistence.services.WinnerPersistence;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

/**
 * Implementation of DrawService
 */
@Component
public class DrawServiceImpl implements DrawService {

	private DrawPersistence drawPersistence;
	private WinnerPersistence winnerPersistence;


	@Resource
	private DrawServiceMapper drawServiceMapper;
	@Resource
	private TicketServiceMapper ticketServiceMapper;
	@Resource
	private WinnerServiceMapper winnerServiceMapper;
	
	public DrawServiceImpl() {
		drawPersistence = PersistenceServiceProvider.getService(DrawPersistence.class);
		winnerPersistence = PersistenceServiceProvider.getService(WinnerPersistence.class);
	}
		
	@Override
	public Draw findById(Integer idDraw) {
		DrawEntity entity = drawPersistence.load(idDraw);
		return drawServiceMapper.mapDrawEntityToDraw(entity);
	}
	
	@Override
	public void launchById(Integer idDraw) {
		
		DrawEntity drawEntity = drawPersistence.loadIncludingParticipantAndWinners(idDraw);
		Integer pot = 0;
		for (TicketEntity ticketEntity : drawEntity.getListOfTicket())
		{
			pot += ticketEntity.getPrice();
		}
		
		Integer priceMoney = pot/2;
		Integer priceMoneyForFirstWInner = priceMoney * 75 / 100;
		Integer priceMoneyForSecondeWInner = priceMoney * 15 / 100;
		Integer priceMoneyForThirdWInner = priceMoney * 10 / 100;
		
		//Define and save first Winner
		final Random randomGenerator;
		randomGenerator = new Random();
		int randomIndex = randomGenerator.nextInt(drawEntity.getListOfTicket().size());
		TicketEntity firstWinner = drawEntity.getListOfTicket().get(randomIndex);
		drawEntity.getListOfTicket().remove(randomIndex);
		
		WinnerEntity firstWinnerEntity = new WinnerEntity();
		firstWinnerEntity.setIdDraw(idDraw);
		firstWinnerEntity.setIdTicket(firstWinner.getIdTicket());
		firstWinnerEntity.setPosition(1);
		firstWinnerEntity.setAmount(priceMoneyForFirstWInner);
		winnerPersistence.save(firstWinnerEntity);
		
		//Define and save second Winner
		randomIndex = randomGenerator.nextInt(drawEntity.getListOfTicket().size());
		TicketEntity SecondWinner = drawEntity.getListOfTicket().get(randomIndex);
		drawEntity.getListOfTicket().remove(randomIndex);
		
		WinnerEntity secondWinnerEntity = new WinnerEntity();
		secondWinnerEntity.setIdDraw(idDraw);
		secondWinnerEntity.setIdTicket(SecondWinner.getIdTicket());
		secondWinnerEntity.setPosition(2);
		secondWinnerEntity.setAmount(priceMoneyForSecondeWInner);
		winnerPersistence.save(secondWinnerEntity);
		
		//Define and save third Winner
		randomIndex = randomGenerator.nextInt(drawEntity.getListOfTicket().size());
		TicketEntity thirdWinner = drawEntity.getListOfTicket().get(randomIndex);
		drawEntity.getListOfTicket().remove(randomIndex);
		
		WinnerEntity thirdWinnerEntity = new WinnerEntity();
		thirdWinnerEntity.setIdDraw(idDraw);
		thirdWinnerEntity.setIdTicket(thirdWinner.getIdTicket());
		thirdWinnerEntity.setPosition(3);
		thirdWinnerEntity.setAmount(priceMoneyForThirdWInner);
		winnerPersistence.save(thirdWinnerEntity);
		
		//Closing of the draw
		drawEntity.setIsOpen(false);
		drawPersistence.save(drawEntity);
		
	}
	
	@Override
	public Draw findByIdIncludingParticipantAndWinners(Integer idDraw) {
		DrawEntity entity = drawPersistence.loadIncludingParticipantAndWinners(idDraw);
		Draw drawSelected = drawServiceMapper.mapDrawEntityToDraw(entity);
		drawSelected.getListTickets();
		for (TicketEntity ticketEntity : entity.getListOfTicket())
		{
			Ticket unTicket = ticketServiceMapper.mapTicketEntityToTicket(ticketEntity);
			drawSelected.getListTickets().add(unTicket);
		}
		drawSelected.getListWinners();
		for (WinnerEntity winnerEntity : entity.getListOfWinner())
		{
			Winner unWinner = winnerServiceMapper.mapWinnerEntityToWinner(winnerEntity);
			for(Ticket unTicket : drawSelected.getListTickets())
			{
				if(unTicket.getIdTicket() == unWinner.getIdTicket())
				{
					unWinner.setParticipantName(unTicket.getParticipantName());
					break;
				}
			}
			drawSelected.getListWinners().add(unWinner);
		}
		
		return drawSelected;
	}

	@Override
	public List<Draw> findAll() {
		List<DrawEntity> entities = drawPersistence.loadAll();
		List<Draw> beans = new ArrayList<Draw>();
		for(DrawEntity entity : entities) {
			beans.add(drawServiceMapper.mapDrawEntityToDraw(entity));
		}
		return beans;
	}

	@Override
	public Draw save(Draw draw) {
		return update(draw) ;
	}

	@Override
	public Draw create(Draw draw) {

		if( draw.getIdDraw() != null && drawPersistence.load(draw.getIdDraw()) != null) {
			throw new IllegalStateException("already.exists");
		}
		
		DrawEntity drawEntity = new DrawEntity();
		drawServiceMapper.mapDrawToDrawEntity(draw, drawEntity);
		DrawEntity drawEntitySaved = drawPersistence.save(drawEntity);
		return drawServiceMapper.mapDrawEntityToDraw(drawEntitySaved);
	}

	@Override
	public Draw update(Draw draw) {
		DrawEntity drawEntity = drawPersistence.load(draw.getIdDraw());
		drawServiceMapper.mapDrawToDrawEntity(draw, drawEntity);
		DrawEntity drawEntitySaved = drawPersistence.save(drawEntity);
		return drawServiceMapper.mapDrawEntityToDraw(drawEntitySaved);
	}

	@Override
	public void delete(Integer idDraw) {
		drawPersistence.delete(idDraw);
	}

	public DrawPersistence getDrawPersistence() {
		return drawPersistence;
	}

	public void setDrawPersistence(DrawPersistence drawPersistence) {
		this.drawPersistence = drawPersistence;
	}

	public DrawServiceMapper getDrawServiceMapper() {
		return drawServiceMapper;
	}

	public void setDrawServiceMapper(DrawServiceMapper drawServiceMapper) {
		this.drawServiceMapper = drawServiceMapper;
	}

}
