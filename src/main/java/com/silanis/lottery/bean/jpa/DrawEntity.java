/*
 * Created on 9 avr. 2015 ( Time 11:50:16 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
// This Bean has a basic Primary Key (not composite) 

package com.silanis.lottery.bean.jpa;

import java.io.Serializable;

//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;

import java.util.Date;
import java.util.List;

import javax.persistence.*;

/**
 * Persistent class for entity stored in table "draw"
 *
 * @author Telosys Tools Generator
 *
 */

@Entity
@Table(name="draw", catalog="silanislottery" )
// Define named queries here
@NamedQueries ( {
  @NamedQuery ( name="DrawEntity.countAll", query="SELECT COUNT(x) FROM DrawEntity x" )
} )
public class DrawEntity implements Serializable {

    private static final long serialVersionUID = 1L;

    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
    //----------------------------------------------------------------------
    @Id
    @GeneratedValue(strategy=GenerationType.AUTO)
    @Column(name="id_draw", nullable=false)
    private Integer    idDraw       ;


    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS 
    //----------------------------------------------------------------------    
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="creation_date")
    private Date       creationDate ;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="draw_date", nullable=false)
    private Date       drawDate     ;

    @Column(name="is_open", nullable=false)
    private Boolean    isOpen       ;



    //----------------------------------------------------------------------
    // ENTITY LINKS ( RELATIONSHIP )
    //----------------------------------------------------------------------
    @OneToMany(mappedBy="draw", targetEntity=TicketEntity.class,
    	       fetch=FetchType.LAZY)
    private List<TicketEntity> listOfTicket;

    @OneToMany(mappedBy="draw", targetEntity=WinnerEntity.class,
    	       fetch=FetchType.LAZY)
    private List<WinnerEntity> listOfWinner;


    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public DrawEntity() {
		super();
    }
    
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE KEY FIELD
    //----------------------------------------------------------------------
    public void setIdDraw( Integer idDraw ) {
        this.idDraw = idDraw ;
    }
    public Integer getIdDraw() {
        return this.idDraw;
    }

    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : creation_date ( DATETIME ) 
    public void setCreationDate( Date creationDate ) {
        this.creationDate = creationDate;
    }
    public Date getCreationDate() {
        return this.creationDate;
    }

    //--- DATABASE MAPPING : draw_date ( DATETIME ) 
    public void setDrawDate( Date drawDate ) {
        this.drawDate = drawDate;
    }
    public Date getDrawDate() {
        return this.drawDate;
    }

    //--- DATABASE MAPPING : is_open ( BIT ) 
    public void setIsOpen( Boolean isOpen ) {
        this.isOpen = isOpen;
    }
    public Boolean getIsOpen() {
        return this.isOpen;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS
    //----------------------------------------------------------------------
    public void setListOfTicket( List<TicketEntity> listOfTicket ) {
        this.listOfTicket = listOfTicket;
    }
    public List<TicketEntity> getListOfTicket() {
        return this.listOfTicket;
    }

    public void setListOfWinner( List<WinnerEntity> listOfWinner ) {
        this.listOfWinner = listOfWinner;
    }
    public List<WinnerEntity> getListOfWinner() {
        return this.listOfWinner;
    }


    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString() { 
        StringBuffer sb = new StringBuffer(); 
        sb.append("["); 
        sb.append(idDraw);
        sb.append("]:"); 
        sb.append(creationDate);
        sb.append("|");
        sb.append(drawDate);
        sb.append("|");
        sb.append(isOpen);
        return sb.toString(); 
    } 

}
