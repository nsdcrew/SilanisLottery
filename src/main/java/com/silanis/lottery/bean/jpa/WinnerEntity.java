/*
 * Created on 9 avr. 2015 ( Time 11:50:16 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
// This Bean has a composite Primary Key  


package com.silanis.lottery.bean.jpa;

import java.io.Serializable;

//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;


import javax.persistence.*;

/**
 * Persistent class for entity stored in table "winner"
 *
 * @author Telosys Tools Generator
 *
 */

@Entity
@Table(name="winner", catalog="silanis_lottery" )
// Define named queries here
@NamedQueries ( {
  @NamedQuery ( name="WinnerEntity.countAll", query="SELECT COUNT(x) FROM WinnerEntity x" )
} )
public class WinnerEntity implements Serializable {

    private static final long serialVersionUID = 1L;

    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( EMBEDDED IN AN EXTERNAL CLASS )  
    //----------------------------------------------------------------------
	@EmbeddedId
    private WinnerEntityKey compositePrimaryKey ;


    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS 
    //----------------------------------------------------------------------    
    @Column(name="position", nullable=false)
    private Integer    position     ;

    @Column(name="amount", nullable=false)
    private Integer    amount       ;



    //----------------------------------------------------------------------
    // ENTITY LINKS ( RELATIONSHIP )
    //----------------------------------------------------------------------
    @OneToOne
    @JoinColumn(name="id_draw", referencedColumnName="id_draw", insertable=false, updatable=false)
    private DrawEntity draw        ;

    @OneToOne
    @JoinColumn(name="id_ticket", referencedColumnName="id_ticket", insertable=false, updatable=false)
    private TicketEntity ticket      ;


    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public WinnerEntity() {
		super();
		this.compositePrimaryKey = new WinnerEntityKey();       
    }
    
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE COMPOSITE KEY 
    //----------------------------------------------------------------------
    public void setIdTicket( Integer idTicket ) {
        this.compositePrimaryKey.setIdTicket( idTicket ) ;
    }
    public Integer getIdTicket() {
        return this.compositePrimaryKey.getIdTicket() ;
    }
    public void setIdDraw( Integer idDraw ) {
        this.compositePrimaryKey.setIdDraw( idDraw ) ;
    }
    public Integer getIdDraw() {
        return this.compositePrimaryKey.getIdDraw() ;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : position ( INT ) 
    public void setPosition( Integer position ) {
        this.position = position;
    }
    public Integer getPosition() {
        return this.position;
    }

    //--- DATABASE MAPPING : amount ( INT ) 
    public void setAmount( Integer amount ) {
        this.amount = amount;
    }
    public Integer getAmount() {
        return this.amount;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS
    //----------------------------------------------------------------------
    public void setDraw( DrawEntity draw ) {
        this.draw = draw;
    }
    public DrawEntity getDraw() {
        return this.draw;
    }

    public void setTicket( TicketEntity ticket ) {
        this.ticket = ticket;
    }
    public TicketEntity getTicket() {
        return this.ticket;
    }


    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString() { 
        StringBuffer sb = new StringBuffer(); 
        sb.append("["); 
        if ( compositePrimaryKey != null ) {  
            sb.append(compositePrimaryKey.toString());  
        }  
        else {  
            sb.append( "(null-key)" ); 
        }  
        sb.append("]:"); 
        sb.append(position);
        sb.append("|");
        sb.append(amount);
        return sb.toString(); 
    } 

}
