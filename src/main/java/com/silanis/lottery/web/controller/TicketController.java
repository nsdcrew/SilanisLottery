/*
 * Created on 9 avr. 2015 ( Time 11:50:01 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.silanis.lottery.web.controller;

import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;







//--- Common classes
import com.silanis.lottery.web.common.AbstractController;
import com.silanis.lottery.web.common.FormMode;
import com.silanis.lottery.web.common.Message;
import com.silanis.lottery.web.common.MessageType;

//--- Entities
import com.silanis.lottery.bean.Ticket;
import com.silanis.lottery.bean.Draw;

//--- Services 
import com.silanis.lottery.business.service.TicketService;
import com.silanis.lottery.business.service.DrawService;

//--- List Items 
import com.silanis.lottery.web.listitem.DrawListItem;

/**
 * Spring MVC controller for 'Ticket' management.
 */
@Controller
@RequestMapping("/ticket")
public class TicketController extends AbstractController {

	//--- Variables names ( to be used in JSP with Expression Language )
	private static final String MAIN_ENTITY_NAME = "ticket";
	private static final String MAIN_LIST_NAME   = "list";

	//--- JSP pages names ( View name in the MVC model )
	private static final String JSP_FORM   = "ticket/form";
	private static final String JSP_LIST   = "ticket/list";

	//--- SAVE ACTION ( in the HTML form )
	private static final String SAVE_ACTION_CREATE   = "/ticket/create";
	private static final String SAVE_ACTION_UPDATE   = "/ticket/update";

	@Value("${ticket.price}")
	private String ticketPrice;

	//--- Main entity service
	@Resource
    private TicketService ticketService; // Injected by Spring
	//--- Other service(s)
	@Resource
    private DrawService drawService; // Injected by Spring

	//--------------------------------------------------------------------------------------
	/**
	 * Default constructor
	 */
	public TicketController() {
		super(TicketController.class, MAIN_ENTITY_NAME );
		log("TicketController created.");
	}

	//--------------------------------------------------------------------------------------
	// Spring MVC model management
	//--------------------------------------------------------------------------------------
	/**
	 * Populates the combo-box "items" for the referenced entity "Draw"
	 * @param model
	 */
	private void populateListOfDrawItems(Model model) {
		List<Draw> list = drawService.findAll();
		List<DrawListItem> items = new LinkedList<DrawListItem>();
		for ( Draw draw : list ) {
			items.add(new DrawListItem( draw ) );
		}
		model.addAttribute("listOfDrawItems", items ) ;
	}


	/**
	 * Populates the Spring MVC model with the given entity and eventually other useful data
	 * @param model
	 * @param ticket
	 */
	private void populateModel(Model model, Ticket ticket, FormMode formMode) {
		//--- Main entity
		model.addAttribute(MAIN_ENTITY_NAME, ticket);
		if ( formMode == FormMode.CREATE ) {
			model.addAttribute(MODE, MODE_CREATE); // The form is in "create" mode
			model.addAttribute(SAVE_ACTION, SAVE_ACTION_CREATE); 			
			//--- Other data useful in this screen in "create" mode (all fields)
			populateListOfDrawItems(model);
		}
		else if ( formMode == FormMode.UPDATE ) {
			model.addAttribute(MODE, MODE_UPDATE); // The form is in "update" mode
			model.addAttribute(SAVE_ACTION, SAVE_ACTION_UPDATE); 			
			//--- Other data useful in this screen in "update" mode (only non-pk fields)
			populateListOfDrawItems(model);
		}
		else if ( formMode == FormMode.DETAILS ) {
			model.addAttribute(MODE, MODE_DETAILS); // The form is in "details" mode 	
			populateListOfDrawItems(model);
		}
	}

	//--------------------------------------------------------------------------------------
	// Request mapping
	//--------------------------------------------------------------------------------------
	/**
	 * Shows a list with all the occurrences of Ticket found in the database
	 * @param model Spring MVC model
	 * @return
	 */
	@RequestMapping()
	public String list(Model model) {
		log("Action 'list'");
		List<Ticket> list = ticketService.findAll();
		model.addAttribute(MAIN_LIST_NAME, list);		
		return JSP_LIST;
	}

	/**
	 * Shows a form page in order to create a new Ticket
	 * @param model Spring MVC model
	 * @return
	 */
	@RequestMapping("/create/{idDraw}")
	public String formForCreate(Model model, @PathVariable("idDraw") Integer idDraw ) {
		log("Action 'formForCreate'");
		//--- Populates the model with a new instance
		Ticket ticket = new Ticket();	
		ticket.setInscriptionDate(new Date());
		ticket.setPrice(Integer.valueOf(ticketPrice));
		ticket.setIdDraw(idDraw);
		populateModel( model, ticket, FormMode.CREATE);
		return JSP_FORM;
	}

	/**
	 * Shows a form page in order to update an existing Ticket
	 * @param model Spring MVC model
	 * @param idTicket  primary key element
	 * @return
	 */
	@RequestMapping(value = "/update/{idTicket}")
	public String formForUpdate(Model model, @PathVariable("idTicket") Integer idTicket ) {
		log("Action 'formForUpdate'");
		//--- Search the entity by its primary key and stores it in the model 
		Ticket ticket = ticketService.findById(idTicket);
		populateModel( model, ticket, FormMode.UPDATE);		
		return JSP_FORM;
	}
	
	/**
	 * Shows a form page in order to update an existing Ticket
	 * @param model Spring MVC model
	 * @param idTicket  primary key element
	 * @return
	 */
	@RequestMapping(value = "/details/{idTicket}")
	public String formForDetails(Model model, @PathVariable("idTicket") Integer idTicket ) {
		log("Action 'formForUpdate'");
		//--- Search the entity by its primary key and stores it in the model 
		Ticket ticket = ticketService.findById(idTicket);
		populateModel( model, ticket, FormMode.DETAILS);		
		return JSP_FORM;
	}
	
	/**
	 * Shows a pdf of the selected ticket
	 * @param model Spring MVC model
	 * @param idTicket  primary key element
	 * @return
	 */
	@RequestMapping(value = "/print/{idTicket}")
	public ModelAndView  printTicket(Model model, @PathVariable("idTicket") Integer idTicket ) {
		log("Action 'formForUpdate'");
		//--- Search the entity by its primary key and stores it in the model 
		Ticket ticket = ticketService.findById(idTicket);
		
		return new ModelAndView("PdfTicket","ticketData",ticket);
	 
			
		
	}

	/**
	 * 'CREATE' action processing. <br>
	 * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
	 * @param ticket  entity to be created
	 * @param bindingResult Spring MVC binding result
	 * @param model Spring MVC model
	 * @param redirectAttributes Spring MVC redirect attributes
	 * @param httpServletRequest
	 * @return
	 */
	@RequestMapping(method = RequestMethod.POST, value = "/create" )// POST
	public String create(@Valid Ticket ticket, BindingResult bindingResult, Model model, RedirectAttributes redirectAttributes, HttpServletRequest httpServletRequest) {
		log("Action 'create'");
		try {
			if (!bindingResult.hasErrors()) {
				Ticket ticketCreated = ticketService.create(ticket); 
				model.addAttribute(MAIN_ENTITY_NAME, ticketCreated);

				//---
				messageHelper.addMessage(redirectAttributes, new Message(MessageType.SUCCESS,"save.ok"));
				log("Action 'update' : save done - redirect");
				populateModel( model, ticketCreated, FormMode.DETAILS);		
				return JSP_FORM;
			} else {
				populateModel( model, ticket, FormMode.CREATE);
				return JSP_FORM;
			}
		} catch(Exception e) {
			log("Action 'create' : Exception - " + e.getMessage() );
			messageHelper.addException(model, "ticket.error.create", e);
			populateModel( model, ticket, FormMode.CREATE);
			return JSP_FORM;
		}
	}

	/**
	 * 'UPDATE' action processing. <br>
	 * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
	 * @param ticket  entity to be updated
	 * @param bindingResult Spring MVC binding result
	 * @param model Spring MVC model
	 * @param redirectAttributes Spring MVC redirect attributes
	 * @param httpServletRequest
	 * @return
	 */
	@RequestMapping(value = "/update" ) // GET or POST
	public String update(@Valid Ticket ticket, BindingResult bindingResult, Model model, RedirectAttributes redirectAttributes, HttpServletRequest httpServletRequest) {
		log("Action 'update'");
		try {
			if (!bindingResult.hasErrors()) {
				//--- Perform database operations
				Ticket ticketSaved = ticketService.update(ticket);
				model.addAttribute(MAIN_ENTITY_NAME, ticketSaved);
				//--- Set the result message
				messageHelper.addMessage(redirectAttributes, new Message(MessageType.SUCCESS,"save.ok"));
				log("Action 'update' : update done - redirect");
				return redirectToForm(httpServletRequest, ticket.getIdTicket());
			} else {
				log("Action 'update' : binding errors");
				populateModel( model, ticket, FormMode.UPDATE);
				return JSP_FORM;
			}
		} catch(Exception e) {
			messageHelper.addException(model, "ticket.error.update", e);
			log("Action 'update' : Exception - " + e.getMessage() );
			populateModel( model, ticket, FormMode.UPDATE);
			return JSP_FORM;
		}
	}

	/**
	 * 'DELETE' action processing. <br>
	 * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
	 * @param redirectAttributes
	 * @param idTicket  primary key element
	 * @return
	 */
	@RequestMapping(value = "/delete/{idTicket}/{idDraw}") // GET or POST
	public String delete(RedirectAttributes redirectAttributes, @PathVariable("idTicket") Integer idTicket, @PathVariable("idDraw") Integer idDraw) {
		log("Action 'delete'" );
		try {
			ticketService.delete( idTicket );
			//--- Set the result message
			messageHelper.addMessage(redirectAttributes, new Message(MessageType.SUCCESS,"delete.ok"));	
		} catch(Exception e) {
			messageHelper.addException(redirectAttributes, "ticket.error.delete", e);
		}
		return "redirect:/draw/details/"+idDraw.toString();
	}

}
