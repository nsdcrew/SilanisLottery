/*
 * Created on 9 avr. 2015 ( Time 11:50:32 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.silanis.lottery.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.silanis.lottery.bean.Winner;
import com.silanis.lottery.bean.jpa.WinnerEntity;
import com.silanis.lottery.bean.jpa.WinnerEntityKey;
import com.silanis.lottery.business.service.mapping.WinnerServiceMapper;
import com.silanis.lottery.persistence.services.jpa.WinnerPersistenceJPA;
import com.silanis.lottery.test.WinnerFactoryForTest;
import com.silanis.lottery.test.WinnerEntityFactoryForTest;
import com.silanis.lottery.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of WinnerService
 */
@RunWith(MockitoJUnitRunner.class)
public class WinnerServiceImplTest {

	@InjectMocks
	private WinnerServiceImpl winnerService;
	@Mock
	private WinnerPersistenceJPA winnerPersistenceJPA;
	@Mock
	private WinnerServiceMapper winnerServiceMapper;
	
	private WinnerFactoryForTest winnerFactoryForTest = new WinnerFactoryForTest();

	private WinnerEntityFactoryForTest winnerEntityFactoryForTest = new WinnerEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer idTicket = mockValues.nextInteger();
		Integer idDraw = mockValues.nextInteger();
		
		WinnerEntityKey winnerEntityKey = new WinnerEntityKey(idTicket, idDraw);
		winnerEntityKey.setIdTicket(idTicket);
		winnerEntityKey.setIdDraw(idDraw);
		
		WinnerEntity winnerEntity = winnerPersistenceJPA.load(winnerEntityKey);
		
		Winner winner = winnerFactoryForTest.newWinner();
		when(winnerServiceMapper.mapWinnerEntityToWinner(winnerEntity)).thenReturn(winner);

		// When
		Winner winnerFound = winnerService.findById(idTicket, idDraw);

		// Then
		assertEquals(winner.getIdTicket(),winnerFound.getIdTicket());
		assertEquals(winner.getIdDraw(),winnerFound.getIdDraw());
	}

	@Test
	public void findAll() {
		// Given
		List<WinnerEntity> winnerEntitys = new ArrayList<WinnerEntity>();
		WinnerEntity winnerEntity1 = winnerEntityFactoryForTest.newWinnerEntity();
		winnerEntitys.add(winnerEntity1);
		WinnerEntity winnerEntity2 = winnerEntityFactoryForTest.newWinnerEntity();
		winnerEntitys.add(winnerEntity2);
		when(winnerPersistenceJPA.loadAll()).thenReturn(winnerEntitys);
		
		Winner winner1 = winnerFactoryForTest.newWinner();
		when(winnerServiceMapper.mapWinnerEntityToWinner(winnerEntity1)).thenReturn(winner1);
		Winner winner2 = winnerFactoryForTest.newWinner();
		when(winnerServiceMapper.mapWinnerEntityToWinner(winnerEntity2)).thenReturn(winner2);

		// When
		List<Winner> winnersFounds = winnerService.findAll();

		// Then
		assertTrue(winner1 == winnersFounds.get(0));
		assertTrue(winner2 == winnersFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Winner winner = winnerFactoryForTest.newWinner();

		WinnerEntity winnerEntity = winnerEntityFactoryForTest.newWinnerEntity();
		when(winnerPersistenceJPA.load(winner.getIdTicket(), winner.getIdDraw())).thenReturn(null);
		
		winnerEntity = new WinnerEntity();
		winnerServiceMapper.mapWinnerToWinnerEntity(winner, winnerEntity);
		WinnerEntity winnerEntitySaved = winnerPersistenceJPA.save(winnerEntity);
		
		Winner winnerSaved = winnerFactoryForTest.newWinner();
		when(winnerServiceMapper.mapWinnerEntityToWinner(winnerEntitySaved)).thenReturn(winnerSaved);

		// When
		Winner winnerResult = winnerService.create(winner);

		// Then
		assertTrue(winnerResult == winnerSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Winner winner = winnerFactoryForTest.newWinner();

		WinnerEntity winnerEntity = winnerEntityFactoryForTest.newWinnerEntity();
		when(winnerPersistenceJPA.load(winner.getIdTicket(), winner.getIdDraw())).thenReturn(winnerEntity);

		// When
		Exception exception = null;
		try {
			winnerService.create(winner);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Winner winner = winnerFactoryForTest.newWinner();

		WinnerEntity winnerEntity = winnerEntityFactoryForTest.newWinnerEntity();
		when(winnerPersistenceJPA.load(winner.getIdTicket(), winner.getIdDraw())).thenReturn(winnerEntity);
		
		WinnerEntity winnerEntitySaved = winnerEntityFactoryForTest.newWinnerEntity();
		when(winnerPersistenceJPA.save(winnerEntity)).thenReturn(winnerEntitySaved);
		
		Winner winnerSaved = winnerFactoryForTest.newWinner();
		when(winnerServiceMapper.mapWinnerEntityToWinner(winnerEntitySaved)).thenReturn(winnerSaved);

		// When
		Winner winnerResult = winnerService.update(winner);

		// Then
		verify(winnerServiceMapper).mapWinnerToWinnerEntity(winner, winnerEntity);
		assertTrue(winnerResult == winnerSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer idTicket = mockValues.nextInteger();
		Integer idDraw = mockValues.nextInteger();

		// When
		winnerService.delete(idTicket, idDraw);

		// Then
		verify(winnerPersistenceJPA).delete(idTicket, idDraw);
		
	}

}
